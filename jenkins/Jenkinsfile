pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('DOCKERHUB_CREDS')
        KUBECONFIG_FILE = credentials('K8S_MINIKUBE')
        DOCKERHUB_USERNAME = "${DOCKERHUB_CREDENTIALS_USR}"
        IMAGE_TAG = "v${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/VaibhavGit10/Assignment_08_Devops.git', branch: 'main'
            }
        }

        stage('Build & Push Backend Image') {
            steps {
                dir('backend') {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'DOCKERHUB_CREDS') {
                            def image = docker.build("${DOCKERHUB_USERNAME}/mern-backend:${IMAGE_TAG}")
                            image.push()
                        }
                    }
                }
            }
        }

        stage('Build & Push Frontend Image') {
            steps {
                dir('frontend') {
                    script {
                        docker.withRegistry('https://index.docker.io/v1/', 'DOCKERHUB_CREDS') {
                            def image = docker.build("${DOCKERHUB_USERNAME}/mern-frontend:${IMAGE_TAG}")
                            image.push()
                        }
                    }
                }
            }
        }

        stage('Deploy to Minikube using Helm') {
            steps {
                withCredentials([file(credentialsId: 'K8S_MINIKUBE', variable: 'KUBECONFIG')]) {
                    sh '''
                    export KUBECONFIG=$KUBECONFIG
                    cd helm-chart/mern-chart
                    helm upgrade --install mern-release . \
                      --set backend.image=${DOCKERHUB_USERNAME}/mern-backend:${IMAGE_TAG} \
                      --set frontend.image=${DOCKERHUB_USERNAME}/mern-frontend:${IMAGE_TAG}
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ Deployment successful!'
        }
        failure {
            echo '‚ùå Build or deploy failed.'
        }
    }
}
