pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('DOCKERHUB_CREDS')
        KUBECONFIG_FILE = credentials('K8S_MINIKUBE')
        IMAGE_TAG = "v${BUILD_NUMBER}"
    }

    stages {
        stage('Build & Push Backend Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'DOCKERHUB_CREDS') {
                        def backendImage = docker.build(
                            "${env.DOCKERHUB_CREDENTIALS_USR}/mern-backend:${IMAGE_TAG}",
                            "backend"
                        )
                        backendImage.push()
                    }
                }
            }
        }

        stage('Build & Push Frontend Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'DOCKERHUB_CREDS') {
                        def frontendImage = docker.build(
                            "${env.DOCKERHUB_CREDENTIALS_USR}/mern-frontend:${IMAGE_TAG}",
                            "frontend"
                        )
                        frontendImage.push()
                    }
                }
            }
        }

        stage('Deploy to Minikube using Helm') {
            steps {
                withCredentials([file(credentialsId: 'K8S_MINIKUBE', variable: 'KCFG')]) {
                    sh """
                        export KUBECONFIG=${KCFG}
                        cd helm-chart/mern-chart
                        helm upgrade --install mern-release . \
                          --set backend.image=${env.DOCKERHUB_CREDENTIALS_USR}/mern-backend:${IMAGE_TAG} \
                          --set frontend.image=${env.DOCKERHUB_CREDENTIALS_USR}/mern-frontend:${IMAGE_TAG}
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ Deployment successful!'
        }
        failure {
            echo '‚ùå Build or deploy failed'
        }
    }
}
